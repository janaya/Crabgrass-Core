
module CastleGates
  module ActsAsCastle
    
    def self.included(base)
      base.class_eval do

        #
        # This allows you to define access on the object that act as locked.
        # A locked object can have different locks for different actions.
        # Access is granted via keys that belong to a keyring.
        # Keys can open different locks (realized via a bitmap)
        #
        def self.acts_as_castle(*gate_definitions)

          has_many :keys, :class_name => "CastleGates::Key", :as => :castle do

            def open?(locks, reload=false)
              self.reload if reload
              proxy_owner.class.keys_open_locks?(self, locks)
            end

            #
            # gate_bitfield is a property of a single key.
            # but! maybe we want to know the sum total bitfield of a series of keys.
            # 
            def gate_bitfield
              if ActiveRecord::Base.connection.adapter_name == 'SQLite'
                self.inject(0) {|prior, key| prior | key.gate_bitfield}
              else
                self.calculate(:bit_or, :gate_bitfield)
              end
            end


            def find_or_initialize_by_holder(holder)
              code = Key.code_for_holder(holder)
              self.find_or_initialize_by_holder_code(code)
            end

            def find_or_create_by_holder(holder)
              code = Key.code_for_holder(holder)
              self.find_or_create_by_holder_code(code)
            end

            #
            # filter the list of keys, including certain holders and
            # excluding others. this happens in-memory, and does not change the db.
            #
            # options is a hash with keys :include and/or :exclude and/or :order
            # , which consist of arrays of holder objects.
            #
            # we preserve the order of the includes.
            #
            def filter_by_holder(options)
              inc = options[:include]
              exc = options[:exclude]
              ord = options[:order] || inc
              keys = self.all
              sorted = []
              ord.each do |holder|
                if key = keys.detect {|key| key.holder?(holder)}
                  sorted << key
                  keys.delete key
                elsif inc.include? holder
                  sorted << Key.new(:locked => proxy_owner, :holder => holder)
                end
              end
              sorted.concat keys
              exc.each do |holder|
                sorted.delete_if {|key| key.holder?(holder)}
              end
              return sorted
            end

          end # has_many :keys

          #
          # This uses ActiveRecord magic to allow you to pre-load the keys for current_user:
          #
          #   @pages = Page.find... :include => {:owner => :current_user_keys}
          #
          has_many :current_user_keys,
                   :class_name => "CastleGates::Key",
                   :conditions => 'holder_code IN (#{User.current.access_codes.join(", ")})',
                   :as => :castle do
            
            def open?(locks)
              proxy_owner.class.keys_open_locks?(self, locks)
            end

            def gate_bitfield
              if ActiveRecord::Base.connection.adapter_name == 'SQLite'
                self.inject(0) {|prior, key| prior | key.gate_bitfield}
              else
                self.calculate(:bit_or, :gate_bitfield)
              end
            end

          end

          # with_gates(gates).open_to(holders)

          #
          # returns all the castles accessible by the holders
          #
          named_scope :access_by, lambda { |holder|
            { :joins => :keys,
              :select => "DISTINCT #{self.table_name}.*",
              :conditions => Key.access_conditions_for(holder) }
          }

          #
          # used in conjunction with please use in conjunction with access_by like this
          # Klass.access_by(holder).allows(lock)
          named_scope :allows, lambda { |lock|
            { :conditions => self.conditions_for_locks(lock) }
          }

          def has_access!(lock, holder)
            if has_access?(lock, holder)
              return true
            else
              raise CastleGates.exception_class.new
            end
          end

          def has_access?(lock, holder = User.current)
            holder = :public if holder.is_a? UnauthenticatedUser
            if holder == User.current
              # these might be cached through AR.
              current_user_keys.open?(lock)
            else
              # the named scope might have changed so we need to reload.
              keys.for_holder(holder).open?(lock, true)
            end
          end

          # for a single holder call
          # grant! user.friends, [:pester, :see]
          #
          # for multiple holders you can use a hash instead:
          # grant! :see => :public, :pester => [user.friends, user.peers]
          #
          # Options:
          # :reset => remove all other locks granted to the holders specified
          #           (defaults to false)
          def grant!(*args)
            options = args.pop if args.count > 1 and args.last.is_a? Hash
            Locks.each_holder_with_locks(*args) do |holder, locks|
              key = keys.find_or_initialize_by_holder(holder)
              key.grant! locks, options
              key
            end
          end

          # no options so far
          def revoke!(*args)
            Locks.each_holder_with_locks(*args) do |holder, locks|
              key = keys.find_or_initialize_by_holder(holder)
              key.revoke! locks
              key
            end
          end

          # this appears to be only used for testing.
          def keys_by_lock
            keys.inject({}) do |hash, key|
              key.locks.each do |lock|
                hash[lock] ||= []
                hash[lock].push key
              end
              hash
            end
          end

          #def self.locks
          #  self.locks_for_bits ~0
          #end

          protected

          def self.keys_open_locks?(keys, locks)
            openable_gates = keys.gate_bitfield
            gates_to_open = bits_for_locks(locks)
            (gates_to_open & ~openable_gates) == 0
          end

          private

          def self.conditions_for_locks(locks)
            bit = self.bits_for_locks(locks)
            "(#{bit} & ~keys.gate_bitfield) = 0"
          end

          def self.bits_for_locks(locks)
            return ~0 if locks == :all
            return self.bit_for(locks) unless locks.respond_to? :inject
            locks.inject(0) {|any, lock| any | self.bit_for(lock)}
          end

          def self.locks_for_bits(bits)
            CastleGates::Locks.locks_for(self, bits)
          end

          def self.bit_for(lock)
            CastleGates::Locks.bit_for(self, lock)
          end

          def self.key_allowed?(lock, holder)
            options = CastleGates::Locks.options_for(self, lock)
            return true unless without = options[:without]
            sym = holder.to_sym
            without.respond_to?(:include?) ?
              !without.include?(sym) :
              without != sym
          end

          #
          # Used to add locks to a class
          #
          # Arguments:
          # * either a list of lock symbols
          # * or an array and an options hash
          # * or a locks hash and an options hash
          #
          # The locks hash has lock symbols as keys and bit indexes as values
          #
          # Options:
          # * without: This lock does not apply for the given key
          #
          # Examples:
          #
          # User.add_locks :view, :pester
          # User.add_locks :see_contacts => 4
          # User.add_locks({:request_contact => 5}, :without => :friends)
          #
          def self.add_locks(*args)
            if args.first.is_a? Enumerable
              locks = args.first
              options = args.second
            else
              locks = args
            end
            CastleGates::Locks.add_bits(self.name, locks)
            CastleGates::Locks.add_options(self.name, locks, options) if options
          end

          if gate_definitions.any?
            self.add_locks(*gate_definitions)
          end

        end
      end
    end

  end # end ActsAsCastle
end # end CastleGates
